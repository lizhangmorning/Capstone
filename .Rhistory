theme_minimal()
# 图2：alpha敏感性分析
df2 <- data.frame(Alpha = alpha_values, Power = power_alpha)
ggplot(df2, aes(x = Alpha, y = Power)) +
geom_line() +
geom_vline(xintercept = alpha, color = "red") +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "blue") +
labs(title = "Sensitivity: Power vs Alpha",
x = "Alpha (Significance Level)", y = "Power") +
theme_minimal()
# 图3：Power vs N （确认当前 N 是否满足目标 power）
df3 <- data.frame(Sample_Size = N_range, Power = power_N)
ggplot(df3, aes(x = Sample_Size, y = Power)) +
geom_line() +
geom_vline(xintercept = N, color = "red") +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "blue") +
labs(title = "Power vs Sample Size (N)", x = "Sample Size (N)", y = "Power") +
theme_minimal()
# 加载必要包
library(ggplot2)
# 自定义参数
p <- 6
q <- 1
Rsq.red <- 0.07701938
Rsq.full <- 0.1274526
alpha <- 0.05
power <- 0.8
# 基准样本量，用于红点
N_base <- mlrF.partial(N = NULL, p = p, q = q,
Rsq.red = Rsq.red, Rsq.full = Rsq.full,
alpha = alpha, power = power)
### 1. 效应大小敏感性分析 ###
effect_sizes <- seq(0.01, 0.4, by = 0.01)
N_effect <- sapply(effect_sizes, function(es) {
mlrF.partial(N = NULL, p = p, q = q,
Rsq.red = Rsq.red, Rsq.full = Rsq.red + es,
alpha = alpha, power = power)
})
df_effect <- data.frame(Effect_Size = effect_sizes, Sample_Size = N_effect)
# 图1：样本量 vs 效应大小
plot1 <- ggplot(df_effect, aes(x = Effect_Size, y = Sample_Size)) +
geom_line() +
geom_point(aes(x = Rsq.full - Rsq.red, y = N_base), color = "red", size = 3) +
labs(title = "Sample Size vs Effect Size (Rsq.full - Rsq.red)",
x = "Effect Size", y = "Required Sample Size") +
theme_minimal()
### 2. alpha 敏感性分析 ###
alpha_vals <- seq(0.001, 0.1, by = 0.005)
N_alpha <- sapply(alpha_vals, function(a) {
mlrF.partial(N = NULL, p = p, q = q,
Rsq.red = Rsq.red, Rsq.full = Rsq.full,
alpha = a, power = power)
})
df_alpha <- data.frame(Alpha = alpha_vals, Sample_Size = N_alpha)
# 图2：样本量 vs Alpha
plot2 <- ggplot(df_alpha, aes(x = Alpha, y = Sample_Size)) +
geom_line() +
geom_point(aes(x = alpha, y = N_base), color = "red", size = 3) +
labs(title = "Sample Size vs Alpha (Significance Level)",
x = "Alpha", y = "Required Sample Size") +
theme_minimal()
### 3. Power 敏感性分析 ###
power_vals <- seq(0.7, 0.99, by = 0.01)
N_power <- sapply(power_vals, function(pwr) {
mlrF.partial(N = NULL, p = p, q = q,
Rsq.red = Rsq.red, Rsq.full = Rsq.full,
alpha = alpha, power = pwr)
})
df_power <- data.frame(Power = power_vals, Sample_Size = N_power)
# 图3：样本量 vs Power
plot3 <- ggplot(df_power, aes(x = Power, y = Sample_Size)) +
geom_line() +
geom_point(aes(x = power, y = N_base), color = "red", size = 3) +
labs(title = "Sample Size vs Power",
x = "Power", y = "Required Sample Size") +
theme_minimal()
# 打印所有图
print(plot1)
print(plot2)
print(plot3)
library(powertools)
mmat <- matrix(c(10, 20, 15, 30), nrow = 2)
anova2way.F.bal(n = NULL, mmatrix = mmat, sd = 20, alpha = 0.05, power = 0.8, v = TRUE)
library(readxl)
data <- read_excel("genotpeAinsulin.xls")
library(readxl)
data <- read_excel("genotpeAinsulin.xls")
library(powertools)
corr.1samp(N = NULL, rho0 = 0, rhoA = 0.3, sides = 2, power = 0.8)
cor_raw <- cor(insulinresist$insulinres, insulinresist$genotype, method = "pearson")
cor_raw <- cor(data$insulinres, data$genotype, method = "pearson")
View(data)
cor_raw <- cor(data$insulinres, data$genotypeA, method = "pearson")
cat("Raw correlation (insulinres ~ genotype):", round(cor_raw, 3), "\n")
result <- pcor.test(data$insulinres, data$genotypeA, data$age10)
library(ppcor)
install.packages("ppcor")
library(ppcor)
result <- pcor.test(data$insulinres, data$genotypeA, data$age10)
cat("Partial correlation (controlling for age):", round(result$estimate, 3), "\n")
library(ppcor)
result <- pcor.test(data$insulinres, data$genotypeA, data$age10)
cat("Partial correlation (controlling for age):", round(result$estimate, 3), "\n")
# Partial correlations to test
r_vals <- seq(0.1, 0.5, by = 0.05)
# Function to convert r to partial R2 (fsq = r^2 / (1 - r^2))
fsq_vals <- (r_vals^2) / (1 - r_vals^2)
# Compute required N for each fsq
n_vals <- sapply(fsq_vals, function(fsq) {
res <- mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
return(ceiling(res))
})
fsq <- result$estimate^2
mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
source("mlrF.partial.R")
fsq <- result$estimate^2
mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
source("mlrF.partial.R")
pc <- result$estimate  # 直接用偏相关系数，不要平方
mlrF.partial(N = NULL, p = 2, q = 1, pc = pc, power = 0.8, v = FALSE)
# Sensitivity analysis for r from 0.1 to 0.5
r_vals <- seq(0.1, 0.3, by = 0.05)
pc_vals <- (r_vals^2) / (1 - r_vals^2)
n_vals <- sapply(pc_vals, function(fsq) {
mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
})
# 合成表格
data.frame(
partial_r = r_vals,
f_squared = round(pc_vals, 3),
required_N = ceiling(n_vals)
)
# Sensitivity analysis for r from 0.1 to 0.5
r_vals <- seq(0.1, 0.3, by = 0.05)
n_vals <- sapply(r_vals, function(fsq) {
mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
})
# 合成表格
data.frame(
partial_r = r_vals,
f_squared = round(pc_vals, 3),
required_N = ceiling(n_vals)
)
# Sensitivity analysis for r from 0.1 to 0.5
r_vals <- seq(0.1, 0.3, by = 0.05)
n_vals <- sapply(r_vals, function(fsq) {
mlrF.partial(N = NULL, p = 2, q = 1, pc = fsq, power = 0.8, v = FALSE)
})
# 合成表格
data.frame(
partial_r = r_vals,
required_N = ceiling(n_vals)
)
# Sensitivity analysis for partial correlation r from 0.1 to 0.3
r_vals <- seq(0.1, 0.3, by = 0.05)
n_vals <- sapply(r_vals, function(r) {
mlrF.partial(N = NULL, p = 2, q = 1, pc = r, power = 0.8, v = FALSE)
})
# 合成结果表格
sensitivity_table <- data.frame(
partial_r = r_vals,
required_N = ceiling(n_vals)
)
print(sensitivity_table)
plot(r_vals, n_vals, type = "b", pch = 19,
xlab = "Partial Correlation (r)",
ylab = "Required Sample Size (80% Power)",
main = "Sample Size vs. Partial Correlation")
abline(h = n_vals[r_vals == 0.3], col = "red", lty = 2)
abline(v = 0.3, col = "red", lty = 2)
library(pmsampsize)
# 假设 General Fatigue 的方差为 5.79^2，调整后 R² 为 0.184，14 个预测变量
pmsampsize(type = "linear",
rsquared = 0.184,
parameters = 14,
sd = 5.79,
mean = 7.72)
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.184,     # adjusted R² from Bower et al.
parameters = 14,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
max_p <- 0
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
if (out$Required_sample_size <= 400) {
max_p <- p
}
}, error = function(e) NULL)
}
max_p  # 输出最大允许的预测参数个数
max_p <- 0
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
if (out$Required_sample_size <= 400) {
max_p <- p
}
}, error = function(e) NULL)
}
max_p
calc_sample_size_r2_diff <- function(p, rsq_adj, delta = 0.05) {
ceiling(1 + (p * (1 - rsq_adj)) / delta)
}
calc_sample_size_r2_diff(p = 14, rsq_adj = 0.184)
max_p <- 0
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- summary(out)$Required_sample_size
if (n_required <= 400) {
max_p <- p
}
}, error = function(e) NULL)
}
max_p
max_p
library(pmsampsize)
# 初始化
max_p <- 0
# 遍历 p 从 1 到 100
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
# 获取样本量
n_required <- as.numeric(summary(out)$Required_sample_size)
# 比较是否小于等于 400
if (!is.na(n_required) && n_required <= 400) {
max_p <- p
}
}, error = function(e) {
# 忽略错误（比如数值问题）
NULL
})
}
cat("最大允许的 predictor parameters 是：", max_p, "\n")
max_p <- 0
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- as.numeric(summary(out)$Required_sample_size)
if (!is.na(n_required)) {
if (n_required <= 400) {
max_p <- p
} else {
break  # 超过 400，立即退出循环
}
}
}, error = function(e) {
NULL
})
}
max_p
max_p <- 0
for (p in 1:100) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- as.numeric(summary(out)$sample_size)
if (!is.na(n_required)) {
if (n_required <= 400) {
max_p <- p
} else {
break  # 超过 400，立即退出循环
}
}
}, error = function(e) {
NULL
})
}
max_p
max_p <- 0
for (p in 1:14) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- as.numeric(summary(out)$sample_size)
if (!is.na(n_required)) {
if (n_required <= 400) {
max_p <- p
} else {
break  # 超过 400，立即退出循环
}
}
}, error = function(e) {
NULL
})
}
max_p <- 0
for (p in 1:14) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.184,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- out$sample_size
if (!is.na(n_required)) {
if (n_required <= 400) {
max_p <- p
} else {
break  # 超过 400，立即退出循环
}
}
}, error = function(e) {
NULL
})
}
max_p
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.184,     # adjusted R² from Bower et al.
parameters = 12,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.184,     # adjusted R² from Bower et al.
parameters = 11,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.184,     # adjusted R² from Bower et al.
parameters = 14,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
source("mlrF.partial.R")
pc <- result$estimate
library(readxl)
data <- read_excel("genotpeAinsulin.xls")
cor_raw <- cor(data$insulinres, data$genotypeA, method = "pearson")
cat("Raw correlation (insulinres ~ genotype):", round(cor_raw, 3), "\n")
library(ppcor)
result <- pcor.test(data$insulinres, data$genotypeA, data$age10)
cat("Partial correlation (controlling for age):", round(result$estimate, 3), "\n")
source("mlrF.partial.R")
pc <- result$estimate
mlrF.partial(N = NULL, p = 2, q = 1, pc = pc, power = 0.8, v = FALSE)
source("mlrF.partial.R")
pc <- result$estimate
mlrF.partial(N = NULL, p = 2, q = 1, pc = pc, power = 0.8, v = FALSE)
source("mlrF.partial.R")
pc <- result$estimate
mlrF.partial(N = NULL, p = 2, q = 1, pc = pc, power = 0.8, v = FALSE)
source("mlrF.partial.R")
pc <- result$estimate
mlrF.partial(N = NULL, p = 2, q = 1, pc = pc, power = 0.8, v = FALSE)
mlrF.partial <- function (N = NULL, p = NULL, q = NULL, pc = NULL,
Rsq.red = NULL, Rsq.full = NULL,
alpha = 0.05, power = NULL, v = FALSE) {
# Check if the arguments are specified correctly
if ((is.null(pc) & (is.null(p) | is.null(q))) | (!is.null(pc) & is.null(p)))
stop("please specify the number of predictors")
if ((is.null(Rsq.red) | is.null(Rsq.full)) & is.null(pc))
stop("please specify Rsq.red and Rsq.full OR pc")
if (!is.null(pc) & (q != 1))
stop("q must be 1 if pc is specified")
check.many(list(N, alpha, power), "oneof")
check.param(N, "pos"); check.param(N, "min", min = 7)
check.param(alpha, "unit")
check.param(power, "unit")
check.param(p, "int")
check.param(q, "int")
check.param(Rsq.red, "unit")
check.param(Rsq.full, "unit")
check.param(pc, "uniti")
check.param(v, "req"); check.param(v, "bool")
# Calculate power
if (is.null(pc)) {
p.body <- quote({
ncp <- N * (Rsq.full - Rsq.red) / (1 - Rsq.full)
df2 <- N - p - q - 1
crit <- stats::qf(1 - alpha, q, df2)
1 - stats::pf(crit, q, df2, ncp)
})
} else {
p.body <- quote({
ncp <- N * pc^2 / (1 - pc^2)
df2 <- N - p - 2
crit <- stats::qf(1 - alpha, 1, df2)
1 - stats::pf(crit, 1, df2, ncp)
})
}
# Use uniroot function to calculate missing argument
if (is.null(power)) {
power <- eval(p.body)
if (!v) return(power)
}
else if (is.null(N)) {
N <- uniroot(function(N) eval(p.body) - power, c(p + q + 2, 1e+09))$root
if (!v) return(N)
}
else if (is.null(alpha)) {
alpha <- uniroot(function(alpha) eval(p.body) - power, c(1e-10, 1 - 1e-10))$root
if (!v) return(alpha)
}
else stop("internal error")
# Generate output text
METHOD <- "Power calculation for a multiple linear regression\n     partial F test"
# Print output as a power.htest object
if (is.null(pc)) {
structure(list(N = N, p = p, q = q,
Rsq.red = Rsq.red, Rsq.full = Rsq.full,
alpha = alpha, power = power,
method = METHOD), class = "power.htest")
} else {
structure(list(N = N, p = p, pc = pc,
alpha = alpha, power = power,
method = METHOD), class = "power.htest")
}
}
library(readxl)
data <- read_excel("genotpeAinsulin.xls")
cor_raw <- cor(data$insulinres, data$genotypeA, method = "pearson")
cat("Raw correlation (insulinres ~ genotype):", round(cor_raw, 3), "\n")
library(ppcor)
result <- pcor.test(data$insulinres, data$genotypeA, data$age10)
cat("Partial correlation (controlling for age):", round(result$estimate, 3), "\n")
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.136,     # adjusted R² from Bower et al.
parameters = 14,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
library(pmsampsize)
pmsampsize(
type = "c",           # continuous outcome
rsquared = 0.156,     # adjusted R² from Bower et al.
parameters = 14,      # number of predictor parameters
sd = 5.79,            # SD of General Fatigue
intercept = 7.72      # mean of General Fatigue
)
max_p <- 0
for (p in 1:14) {
result <- tryCatch({
out <- pmsampsize(
type = "c",
rsquared = 0.156,
parameters = p,
sd = 5.79,
intercept = 7.72
)
n_required <- out$sample_size
if (!is.na(n_required)) {
if (n_required <= 400) {
max_p <- p
} else {
break  # 超过 400，立即退出循环
}
}
}, error = function(e) {
NULL
})
}
max_p
cor_raw <- cor(data$insulinres, data$genotypeA, method = "pearson")
cat("Raw correlation (insulinres ~ genotype):", round(cor_raw, 3), "\n")
