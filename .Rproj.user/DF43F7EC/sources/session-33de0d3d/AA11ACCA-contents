---
title: "Mixed Yue"
format: html
editor: visual
---

```{r}
library(ggplot2)
library(plotly)
library(dplyr)

run_mixture_plot <- function(data_child, data_adult, weight_grid = seq(0, 1, by = 0.025), nsim = 1e5) {

  res_df <- data.frame(
    weight = weight_grid,
    median_rr = NA, lower_95_rr = NA, upper_95_rr = NA,
    ess_total_rr = NA, ess_treat_rr = NA, ess_control_rr = NA
  )

  prior_flat <- list(a = 1, b = 1)

  # No-borrowing posteriors
  p1_noborrow <- rbeta(nsim, prior_flat$a + data_child$treat$y,
                       prior_flat$b + data_child$treat$n - data_child$treat$y)
  p2_noborrow <- rbeta(nsim, prior_flat$a + data_child$control$y,
                       prior_flat$b + data_child$control$n - data_child$control$y)
  var_p1_nob <- var(p1_noborrow)
  var_p2_nob <- var(p2_noborrow)

  prior_params <- list(
    treat = if (data_adult$treat$n > 0) {
      list(a = data_adult$treat$y + 1, b = data_adult$treat$n - data_adult$treat$y + 1)
    } else NULL,
    control = if (data_adult$control$n > 0) {
      list(a = data_adult$control$y + 1, b = data_adult$control$n - data_adult$control$y + 1)
    } else NULL
  )

  for (i in seq_along(weight_grid)) {
    w <- weight_grid[i]

    k_treat <- if (!is.null(prior_params$treat)) {
      C_info <- compute_C(prior_params$treat$a, prior_params$treat$b,
                          data_child$treat$y, data_child$treat$n)
      C_flat <- compute_C(prior_flat$a, prior_flat$b,
                          data_child$treat$y, data_child$treat$n)
      (w * C_info) / (w * C_info + (1 - w) * C_flat)
    } else 0

    k_control <- if (!is.null(prior_params$control)) {
      C_info <- compute_C(prior_params$control$a, prior_params$control$b,
                          data_child$control$y, data_child$control$n)
      C_flat <- compute_C(prior_flat$a, prior_flat$b,
                          data_child$control$y, data_child$control$n)
      (w * C_info) / (w * C_info + (1 - w) * C_flat)
    } else 0

    post_p1 <- ifelse(
      runif(nsim) < k_treat,
      rbeta(nsim, prior_params$treat$a + data_child$treat$y,
             prior_params$treat$b + data_child$treat$n - data_child$treat$y),
      rbeta(nsim, prior_flat$a + data_child$treat$y,
             prior_flat$b + data_child$treat$n - data_child$treat$y)
    )

    post_p2 <- ifelse(
      runif(nsim) < k_control,
      rbeta(nsim, prior_params$control$a + data_child$control$y,
             prior_params$control$b + data_child$control$n - data_child$control$y),
      rbeta(nsim, prior_flat$a + data_child$control$y,
             prior_flat$b + data_child$control$n - data_child$control$y)
    )

    rr_post <- post_p1 - post_p2

    ess_treat <- if (!is.null(prior_params$treat)) (var_p1_nob / var(post_p1) - 1) * data_child$treat$n else 0
    ess_control <- if (!is.null(prior_params$control)) (var_p2_nob / var(post_p2) - 1) * data_child$control$n else 0

    res_df[i, ] <- c(w, median(rr_post), quantile(rr_post, c(0.025, 0.975)), ess_treat + ess_control, ess_treat, ess_control)
  }

  # 找 tipping point
  tipping_idx <- which(res_df$lower_95_rr > 0)[1]
  k_tp <- if (!is.na(tipping_idx)) res_df$weight[tipping_idx] else NA

  # Plot
  p <- ggplot(res_df, aes(x = weight, y = median_rr,
                          text = paste0("k=", round(weight, 2),
                                        "<br>ESS Trt: ", round(ess_treat_rr, 1),
                                        "<br>ESS Ctl: ", round(ess_control_rr, 1),
                                        "<br>95% CI: [", round(lower_95_rr, 3), ", ", round(upper_95_rr, 3), "]"))) +
    geom_point() +
    geom_errorbar(aes(ymin = lower_95_rr, ymax = upper_95_rr), width = 0.01) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
    geom_vline(xintercept = k_tp, linetype = "dashed", color = "blue") +
    labs(title = "Tipping Point with Mixture Prior",
         x = "Weight (k)",
         y = "Treatment Effect (Difference in Response Rate)") +
    theme_minimal()

  # 转换为 plotly 增强交互
  ggplotly(p, tooltip = "text")
}



```

```{r}

# Plot 1: Treatment effect with credible interval
# Load required libraries
library(rjags)    
library(ggplot2)  
library(gridExtra) 
library(dplyr)    
library(coda)     

# ---------------------
# Data Input
# ---------------------
# Adult data
adult_placebo_n <- 494; adult_placebo_r <- 45  
adult_drug_n <- 509; adult_drug_r <- 375

# Pediatric data 
ped_placebo_n <- 6; ped_placebo_r <- 1
ped_drug_n <- 30; ped_drug_r <- 15

# ---------------------
# Parameter Settings
# ---------------------
n_samples <- 50000  
n_burn <- 5000      
n_chains <- 3       
alpha_skeptical <- 1; beta_skeptical <- 1  # Parameters for skeptical prior (Beta(1,1))

# Calculate adult prior parameters
# Using Beta(alpha, beta) where alpha = successes + 1, beta = failures + 1
alpha_adult_placebo <- adult_placebo_r + 1
beta_adult_placebo <- adult_placebo_n - adult_placebo_r + 1
alpha_adult_drug <- adult_drug_r + 1
beta_adult_drug <- adult_drug_n - adult_drug_r + 1

# ---------------------
# JAGS Model Definition
# ---------------------
# Bayesian model using mixture priors:
# - Adult data prior (informative)
# - Skeptical prior (non-informative)
# Weighted by parameter k (0-1)
model_template <- "
model {
  # prior model
  # Drug prior 
  p_drug_adult ~ dbeta(alpha_adult_drug, beta_adult_drug)  # Adult data prior
  p_drug_skeptical ~ dbeta(alpha_skeptical, beta_skeptical) # Skeptical prior
  z_drug ~ dbern(k)  # Binary indicator for which prior to use
  p_drug <- z_drug * p_drug_adult + (1-z_drug) * p_drug_skeptical  # Mixture
  
  # Placebo prior
  p_placebo_adult ~ dbeta(alpha_adult_placebo, beta_adult_placebo)
  p_placebo_skeptical ~ dbeta(alpha_skeptical, beta_skeptical)
  z_placebo ~ dbern(k)
  p_placebo <- z_placebo * p_placebo_adult + (1-z_placebo) * p_placebo_skeptical

  # Likelihood functions for pediatric data
  r_drug ~ dbin(p_drug, n_drug)      
  r_placebo ~ dbin(p_placebo, n_placebo)

  # Treatment effect (difference in response rates)
  effect_diff <- p_drug - p_placebo
}
"

# ---------------------
# Function to Get Variance with No Prior (k=0)
# ---------------------
# This establishes baseline variance when only using skeptical prior
get_variance_no_prior <- function(model_template, jags_data_template, 
                                 n_chains = 3, n_burn = 5000, n_samples = 50000) {
  jags_data <- c(jags_data_template, list(k = 0))  # Set k=0 (only skeptical prior)
  jags_model <- jags.model(textConnection(model_template), 
                          data = jags_data, 
                          n.chains = n_chains, 
                          quiet = TRUE)
  update(jags_model, n.iter = n_burn)  
  samples <- coda.samples(jags_model, 
                         variable.names = c("p_drug", "p_placebo"), 
                         n.iter = n_samples)
  all_samples <- do.call(rbind, samples)  
  
  # Return variances for drug and placebo groups
  list(
    var_placebo = var(all_samples[, "p_placebo"]),
    var_drug = var(all_samples[, "p_drug"])
  )
}

# ---------------------
# Prepare Data Template for JAGS
# ---------------------
jags_data_template <- list(
  alpha_adult_drug = alpha_adult_drug,
  beta_adult_drug = beta_adult_drug,
  alpha_adult_placebo = alpha_adult_placebo,
  beta_adult_placebo = beta_adult_placebo,
  alpha_skeptical = alpha_skeptical,
  beta_skeptical = beta_skeptical,
  r_drug = ped_drug_r,     
  n_drug = ped_drug_n,    
  r_placebo = ped_placebo_r, 
  n_placebo = ped_placebo_n  
)

# ---------------------
# Calculate Baseline Variance (k=0)
# ---------------------
variances_no_prior <- get_variance_no_prior(
  model_template = model_template,
  jags_data_template = jags_data_template,
  n_chains = n_chains,
  n_burn = n_burn,
  n_samples = n_samples
)
var_placebo_no_prior <- variances_no_prior$var_placebo
var_drug_no_prior <- variances_no_prior$var_drug

# ---------------------
# Initialize Results Data Frame
# ---------------------
results <- data.frame(
  k = numeric(),            
  z_drug_mean = numeric(),  
  z_placebo_mean = numeric(), 
  ci_lower = numeric(),     
  ci_upper = numeric(),     
  median_diff = numeric(),  
  ESS_placebo = numeric(), 
  ESS_drug = numeric(),     
  prob_superior = numeric() 
)

# ---------------------
# Main Analysis: Grid Search Over k Values
# ---------------------
k_values <- seq(0, 1, by = 0.01)  

for (k in k_values) {
  jags_data <- c(jags_data_template, list(k = k))
  
  jags_model <- jags.model(textConnection(model_template), 
                          data = jags_data, 
                          n.chains = n_chains, 
                          quiet = TRUE)
  update(jags_model, n.iter = n_burn)  
  
  # Draw samples from posterior
  jags_samples <- coda.samples(jags_model, 
                             variable.names = c("p_drug", "p_placebo", "effect_diff", "z_drug", "z_placebo"), 
                             n.iter = n_samples)
  all_samples <- do.call(rbind, jags_samples)  # Combine chains
  
  # Calculate effective sample size (ESS) 
  # ESS = n_ped * (var_no_prior/var_current - 1)
  # Where n_ped is pediatric sample size and var_no_prior is k=0 variance
  
  # Store results
  results <- rbind(results, data.frame(
    k = k,
    z_drug_mean = mean(all_samples[, "z_drug"]),
    z_placebo_mean = mean(all_samples[, "z_placebo"]),
    ci_lower = quantile(all_samples[, "effect_diff"], 0.025),
    ci_upper = quantile(all_samples[, "effect_diff"], 0.975),
    median_diff = median(all_samples[, "effect_diff"]),
    ESS_placebo = ped_placebo_n * (var_placebo_no_prior / var(all_samples[, "p_placebo"]) - 1),
    ESS_drug = ped_drug_n * (var_drug_no_prior / var(all_samples[, "p_drug"]) - 1),
    prob_superior = mean(all_samples[, "effect_diff"] > 0)
  ))
  
  cat("Completed analysis for k =", k, "\n")
}

# ---------------------
# Identify Tipping Point
# ---------------------
# Sort results by k value
results <- results[order(results$k), ]

# Find the smallest k where 95% CI lower bound > 0
tipping_point <- results %>% filter(ci_lower > 0) %>% slice(1)

# Print tipping point results
cat("\nTipping Point Analysis:\n")
cat("Critical Weight (k):", tipping_point$k, "\n")
cat("Posterior Probability of Adult Prior Being Used:\n")
cat("  Treatment Group:", round(tipping_point$z_drug_mean, 3), "\n")
cat("  Control Group:", round(tipping_point$z_placebo_mean, 3), "\n")
cat("Median Response Rate Difference:", round(tipping_point$median_diff, 3), "\n")
cat("95% Credible Interval: [", round(tipping_point$ci_lower, 3), ",", 
    round(tipping_point$ci_upper, 3), "]\n")
cat("Probability Drug Superior to Placebo:", round(tipping_point$prob_superior, 3), "\n")
cat("Effective Sample Size (Treatment):", round(tipping_point$ESS_drug, 1), "\n")
cat("Effective Sample Size (Control):", round(tipping_point$ESS_placebo, 1), "\n")

# ---------------------
# Visualization
# ---------------------
# Plot 1: Treatment effect with credible interval
k_tp <- tipping_point$k
ci_lower_tp <- tipping_point$ci_lower
ci_upper_tp <- tipping_point$ci_upper
median_diff_tp <- tipping_point$median_diff

# ---------------------
# Subset for plotting (非连续点，例如每隔0.1取一个)
# 更密集选择点：每隔 0.05 一个
plot_subset <- results %>% filter(round(k, 3) %in% seq(0, 1, by = 0.05))

# 确保包含 tipping point 所在 k（如果不在 round(k, 3) 中）
if (!(round(k_tp, 3) %in% round(plot_subset$k, 3))) {
  plot_subset <- bind_rows(plot_subset, results %>% filter(round(k, 3) == round(k_tp, 3)))
}

# 绘图
ggplot(plot_subset, aes(x = k, y = median_diff)) +
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.015) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  geom_vline(xintercept = k_tp, linetype = "dashed", color = "blue") +
  
  # 在每个点下方标注 ESS（treatment 和 control）
  geom_text(aes(label = paste0("Trt:", round(ESS_drug, 1))), 
            vjust = 1.8, size = 3, color = "darkred") +
  geom_text(aes(label = paste0("Ctl:", round(ESS_placebo, 1))), 
            vjust = 3.3, size = 3, color = "darkgreen") +
  
  # 标注 tipping point
  annotate("text", x = k_tp, y = ci_upper_tp + 0.02, 
           label = paste0("Tipping Point = ", round(k_tp, 2)), 
           hjust = -0.1, vjust = 1.5, color = "blue", fontface = "bold") +
  annotate("text", x = k_tp, y = ci_lower_tp - 0.05, 
           label = paste0("ESS: Trt=", round(tipping_point$ESS_drug, 1),
                          ", Ctl=", round(tipping_point$ESS_placebo, 1)),
           hjust = -0.1, vjust = 0, color = "black") +
  
  labs(title = "Tipping Point Identification with ESS",
       x = "Weight Parameter (k)", 
       y = "Effect (Drug - Placebo)") +
  theme_minimal(base_size = 14)




```

\`\`\`
